{"version":3,"sources":["features/songs/details/useSongDetails.ts","features/songs/details/SongDetailsPage.tsx"],"names":["timeout","ms","Promise","resolve","setTimeout","YouTubePlayer","React","lazy","LyricsDisplay","SongDetailsPage","data","songId","useSWR","a","id","artist","title","youtubeId","lyrics","provider","locale","geniusSongId","startIndex","endIndex","suspense","useSongDetails","useParams","fallback","YouTubePlayerSkeleton","embedId","SongTitle","LyricsSkeleton","source","styled","div"],"mappings":"8PAIA,SAASA,EAAQC,GACf,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,MAe/C,I,SCJDI,EAAgBC,IAAMC,MAAK,kBAAM,gCACjCC,EAAgBF,IAAMC,MAAK,kBAAM,gCAMhC,SAASE,IAAmB,IAEzBC,EDLoB,SAACC,GAC7B,OAAOC,YAAO,SAAD,OACFD,GADE,sBAEX,sBAAAE,EAAA,sEACQb,EAAQ,KADhB,gCAGS,CACLc,GAAIH,EACJI,OAAQ,qBACRC,MAAO,iCACPC,UAAW,cACXC,OAAQ,CACN,CACEC,SAAU,SACVC,OAAQ,QACRC,aAAc,UACdC,WAAY,IACZC,SAAU,MAEZ,CACEJ,SAAU,SACVC,OAAQ,UACRC,aAAc,UACdC,WAAY,IACZC,SAAU,SArBlB,2CA0BA,CAAEC,UAAU,ICxBGC,CADEC,cAAXf,QACAD,KAER,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,WAAD,CAAUiB,SAAU,cAACC,EAAA,EAAD,IAApB,SACE,cAACvB,EAAD,CAAewB,QAASnB,EAAKO,cAG/B,eAAC,IAAD,WACE,eAACa,EAAD,WACGpB,EAAKK,OADR,MACmBL,EAAKM,SAExB,cAAC,IAAD,UACE,cAAC,WAAD,CAAUW,SAAU,cAACI,EAAA,EAAD,IAApB,SACE,cAACvB,EAAD,CAAewB,OAAQtB,EAAKQ,OAAO,eAK3C,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,UAMOT,gBAETqB,EAAYG,IAAOC,IAAV","file":"static/js/4.01356798.chunk.js","sourcesContent":["import useSWR, { SWRResponse } from 'swr';\n\nimport { LyricsSource } from 'features/songs/lyrics/useLyrics';\n\nfunction timeout(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\ninterface Song {\n  id: string;\n  artist: string;\n  title: string;\n  youtubeId: string;\n  lyrics: LyricsSource[];\n}\n\ninterface SuspenseResponseInterface extends SWRResponse<Song, any> {\n  data: Song;\n}\n\nexport const useSongDetails = (songId: string) => {\n  return useSWR(\n    `songs/${songId}`,\n    async () => {\n      await timeout(1000);\n\n      return {\n        id: songId,\n        artist: '林二汶',\n        title: '最後的信仰',\n        youtubeId: 'tsL-kPHb0UU',\n        lyrics: [\n          {\n            provider: 'genius',\n            locale: 'zh_HK',\n            geniusSongId: '5462067',\n            startIndex: 648,\n            endIndex: 1389,\n          },\n          {\n            provider: 'genius',\n            locale: 'zh_HK_R',\n            geniusSongId: '5462173',\n            startIndex: 643,\n            endIndex: 2878,\n          },\n        ],\n      };\n    },\n    { suspense: true }\n  ) as SuspenseResponseInterface;\n};\n","import React, { Suspense } from 'react';\nimport styled from '@emotion/styled';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  PageContainer,\n  SongContainer,\n  SongDetailsContainer,\n  LyricsContainer,\n  UpcomingContainer,\n  UpcomingSong,\n} from './SongDetailsSkeleton';\nimport { YouTubePlayerSkeleton } from './YouTubePlayerSkeleton';\nimport { LyricsSkeleton } from '../lyrics/LyricsSkeleton';\nimport { useSongDetails } from './useSongDetails';\n\nconst YouTubePlayer = React.lazy(() => import('./YouTubePlayer'));\nconst LyricsDisplay = React.lazy(() => import('../lyrics/LyricsDisplay'));\n\ninterface RouteParams {\n  songId: string;\n}\n\nexport function SongDetailsPage() {\n  const { songId } = useParams<RouteParams>();\n  const { data } = useSongDetails(songId);\n\n  return (\n    <PageContainer>\n      <SongContainer>\n        <Suspense fallback={<YouTubePlayerSkeleton />}>\n          <YouTubePlayer embedId={data.youtubeId} />\n        </Suspense>\n\n        <SongDetailsContainer>\n          <SongTitle>\n            {data.artist} - {data.title}\n          </SongTitle>\n          <LyricsContainer>\n            <Suspense fallback={<LyricsSkeleton />}>\n              <LyricsDisplay source={data.lyrics[0]} />\n            </Suspense>\n          </LyricsContainer>\n        </SongDetailsContainer>\n      </SongContainer>\n      <UpcomingContainer>\n        <UpcomingSong />\n        <UpcomingSong />\n        <UpcomingSong />\n        <UpcomingSong />\n        <UpcomingSong />\n      </UpcomingContainer>\n    </PageContainer>\n  );\n}\n\nexport default SongDetailsPage;\n\nconst SongTitle = styled.div`\n  height: 26px;\n  line-height: 26px;\n`;\n"],"sourceRoot":""}