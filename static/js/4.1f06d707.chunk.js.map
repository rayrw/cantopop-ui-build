{"version":3,"sources":["features/songs/songsAPI.ts","features/songs/details/SongDetailsPage.tsx","features/songs/details/useSongDetails.ts"],"names":["timeout","ms","Promise","resolve","setTimeout","songsAPI","fetchAll","fetch","process","res","json","fetchById","songId","YouTubePlayer","React","lazy","LyricsDisplay","SongDetailsPage","data","useSWR","a","id","artist","title","youtubeId","youtube_id","lyrics","map","rawLyrics","provider","locale","geniusSongId","genius_song_id","startIndex","start_index","endIndex","end_index","suspense","useSongDetails","useParams","fallback","YouTubePlayerSkeleton","embedId","SongTitle","LyricsSkeleton","source","styled","div"],"mappings":"oKAAA,SAASA,EAAQC,GACf,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,MAG/C,IAAMI,EAAW,CAChBC,SADgB,WACJ,OAAD,4HACTN,EAAQ,MADC,uBAEGO,MAAM,GAAD,OAAIC,kCAAJ,YAFR,cAETC,EAFS,gBAGIA,EAAIC,OAHR,cAGTA,EAHS,yBAIRA,GAJQ,8CAMXC,UAPgB,SAONC,GAAiB,OAAD,4HACxBZ,EAAQ,MADgB,uBAEZO,MAAM,GAAD,OAClBC,kCADkB,kBAC0BI,EAD1B,MAFO,cAExBH,EAFwB,gBAKXA,EAAIC,OALO,cAKxBA,EALwB,yBAMvBA,GANuB,gD,0MCI5BG,EAAgBC,IAAMC,MAAK,kBAAM,gCACjCC,EAAgBF,IAAMC,MAAK,kBAAM,gCAMhC,SAASE,IAAmB,IAEzBC,ECPoB,SAACN,GAC7B,OAAOO,YAAO,SAAD,OACFP,GADE,sBAEX,4BAAAQ,EAAA,sEACqBf,IAASM,UAAUC,GADxC,cACQM,EADR,yBAGS,CACLG,GAAIH,EAAKG,GACTC,OAAQJ,EAAKI,OACbC,MAAOL,EAAKK,MACZC,UAAWN,EAAKO,WAChBC,OAAQR,EAAKQ,OAAOC,KAAI,SAACC,GAAD,MAAqB,CAC3CC,SAAUD,EAAUC,SACpBC,OAAQF,EAAUE,OAClBC,aAAcH,EAAUI,eACxBC,WAAYL,EAAUM,YACtBC,SAAUP,EAAUQ,gBAb1B,2CAiBA,CAAEC,UAAU,IDbGC,CADEC,cAAX3B,QACAM,KAER,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,WAAD,CAAUsB,SAAU,cAACC,EAAA,EAAD,IAApB,SACE,cAAC5B,EAAD,CAAe6B,QAASxB,EAAKM,cAG/B,eAAC,IAAD,WACE,eAACmB,EAAD,WACGzB,EAAKI,OADR,MACmBJ,EAAKK,SAExB,cAAC,IAAD,UACE,cAAC,WAAD,CAAUiB,SAAU,cAACI,EAAA,EAAD,IAApB,SACE,cAAC5B,EAAD,CAAe6B,OAAQ3B,EAAKQ,OAAO,eAK3C,cAAC,IAAD,OAKST,gBAET0B,EAAYG,IAAOC,IAAV","file":"static/js/4.1f06d707.chunk.js","sourcesContent":["function timeout(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport const songsAPI = {\n  async fetchAll() {\n    await timeout(1500);\n    const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}/songs/`);\n    const json = await res.json();\n    return json;\n  },\n  async fetchById(songId: string) {\n    await timeout(1500);\n    const res = await fetch(\n      `${process.env.REACT_APP_API_BASE_URL}/songs/${songId}/`\n    );\n    const json = await res.json();\n    return json;\n  },\n};\n","import React, { Suspense } from 'react';\nimport styled from '@emotion/styled';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  PageContainer,\n  SongContainer,\n  SongDetailsContainer,\n  LyricsContainer,\n  UpcomingContainer,\n} from './SongDetailsSkeleton';\nimport { YouTubePlayerSkeleton } from './YouTubePlayerSkeleton';\nimport { LyricsSkeleton } from '../lyrics/LyricsSkeleton';\nimport { useSongDetails } from './useSongDetails';\n\nconst YouTubePlayer = React.lazy(() => import('./YouTubePlayer'));\nconst LyricsDisplay = React.lazy(() => import('../lyrics/LyricsDisplay'));\n\ninterface RouteParams {\n  songId: string;\n}\n\nexport function SongDetailsPage() {\n  const { songId } = useParams<RouteParams>();\n  const { data } = useSongDetails(songId);\n\n  return (\n    <PageContainer>\n      <SongContainer>\n        <Suspense fallback={<YouTubePlayerSkeleton />}>\n          <YouTubePlayer embedId={data.youtubeId} />\n        </Suspense>\n\n        <SongDetailsContainer>\n          <SongTitle>\n            {data.artist} - {data.title}\n          </SongTitle>\n          <LyricsContainer>\n            <Suspense fallback={<LyricsSkeleton />}>\n              <LyricsDisplay source={data.lyrics[0]} />\n            </Suspense>\n          </LyricsContainer>\n        </SongDetailsContainer>\n      </SongContainer>\n      <UpcomingContainer></UpcomingContainer>\n    </PageContainer>\n  );\n}\n\nexport default SongDetailsPage;\n\nconst SongTitle = styled.div`\n  height: 26px;\n  line-height: 26px;\n`;\n","import useSWR, { SWRResponse } from 'swr';\n\nimport { songsAPI } from 'features/songs/songsAPI';\nimport { LyricsSource } from 'features/songs/lyrics/useLyrics';\n\ninterface Song {\n  id: string;\n  artist: string;\n  title: string;\n  youtubeId: string;\n  lyrics: LyricsSource[];\n}\n\ninterface SuspenseResponseInterface extends SWRResponse<Song, any> {\n  data: Song;\n}\n\nexport const useSongDetails = (songId: string) => {\n  return useSWR(\n    `songs/${songId}`,\n    async () => {\n      const data = await songsAPI.fetchById(songId);\n\n      return {\n        id: data.id,\n        artist: data.artist,\n        title: data.title,\n        youtubeId: data.youtube_id,\n        lyrics: data.lyrics.map((rawLyrics: any) => ({\n          provider: rawLyrics.provider,\n          locale: rawLyrics.locale,\n          geniusSongId: rawLyrics.genius_song_id,\n          startIndex: rawLyrics.start_index,\n          endIndex: rawLyrics.end_index,\n        })),\n      };\n    },\n    { suspense: true }\n  ) as SuspenseResponseInterface;\n};\n"],"sourceRoot":""}