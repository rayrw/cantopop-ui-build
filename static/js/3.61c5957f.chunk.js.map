{"version":3,"sources":["features/songs/details/YouTubePlayer.tsx","features/songs/details/SongDetailsPage.tsx","features/songs/details/useSongDetails.ts"],"names":["YouTubePlayer","embedId","Container","YouTubeFrame","src","frameBorder","allow","allowFullScreen","styled","YouTubePlayerSkeleton","iframe","LyricsSection","React","lazy","SongDetailsPage","data","songId","useSWR","_type","songsAPI","fetchById","suspense","revalidateOnFocus","revalidateOnReconnect","revalidateOnMount","useSongDetails","useParams","youtubeId","SongTitle","artist","title","fallback","LyricsSectionSkeleton","sources","lyrics","div"],"mappings":"gOASO,SAASA,EAAT,GAA2C,IAAlBC,EAAiB,EAAjBA,QAC9B,OACE,cAACC,EAAD,UACE,cAACC,EAAD,CACEC,IAAG,wCAAmCH,GACtCI,YAAY,IACZC,MAAM,2FACNC,iBAAe,MAMvB,I,EAAML,EAAYM,YAAOC,IAAPD,CAAH,wEAKTL,EAAeK,IAAOE,OAAV,2G,wBCZZC,EAAgBC,IAAMC,MAAK,kBAAM,gCAMhC,SAASC,IAAmB,IAEzBC,ECNoB,SAACC,GAC7B,OAAOC,YACL,CAAC,QAASD,IACV,SAACE,EAAOF,GAAR,OAAmBG,IAASC,UAAUJ,KACtC,CACEK,UAAU,EACVC,mBAAmB,EACnBC,uBAAuB,EACvBC,mBAAmB,IDFNC,CADEC,cAAXV,QACAD,KAER,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAACf,EAAD,CAAeC,QAASc,EAAKY,YAE7B,eAAC,IAAD,WACE,eAACC,EAAD,WACGb,EAAKc,OADR,MACmBd,EAAKe,SAExB,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,SACE,cAACrB,EAAD,CAAesB,QAASlB,EAAKmB,mBAKrC,cAAC,IAAD,OAKN,IAAMN,EAAYpB,IAAO2B,IAAV,uFAMArB","file":"static/js/3.61c5957f.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { YouTubePlayerSkeleton } from './YouTubePlayerSkeleton';\n\ninterface Prop {\n  embedId: string;\n}\n\nexport function YouTubePlayer({ embedId }: Prop) {\n  return (\n    <Container>\n      <YouTubeFrame\n        src={`https://www.youtube.com/embed/${embedId}`}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </Container>\n  );\n}\n\nconst Container = styled(YouTubePlayerSkeleton)`\n  position: relative;\n  background: #000;\n`;\n\nconst YouTubeFrame = styled.iframe`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n","import React, { Suspense } from 'react';\nimport styled from '@emotion/styled';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  PageContainer,\n  SongContainer,\n  SongDetailsContainer,\n  LyricsContainer,\n  UpcomingContainer,\n} from './SongDetailsSkeleton';\nimport { YouTubePlayer } from './YouTubePlayer';\nimport { LyricsSectionSkeleton } from '../lyrics/LyricsSectionSkeleton';\nimport { useSongDetails } from './useSongDetails';\n\nconst LyricsSection = React.lazy(() => import('../lyrics/LyricsSection'));\n\ninterface RouteParams {\n  songId: string;\n}\n\nexport function SongDetailsPage() {\n  const { songId } = useParams<RouteParams>();\n  const { data } = useSongDetails(songId);\n\n  return (\n    <PageContainer>\n      <SongContainer>\n        <YouTubePlayer embedId={data.youtubeId} />\n\n        <SongDetailsContainer>\n          <SongTitle>\n            {data.artist} - {data.title}\n          </SongTitle>\n          <LyricsContainer>\n            <Suspense fallback={<LyricsSectionSkeleton />}>\n              <LyricsSection sources={data.lyrics} />\n            </Suspense>\n          </LyricsContainer>\n        </SongDetailsContainer>\n      </SongContainer>\n      <UpcomingContainer></UpcomingContainer>\n    </PageContainer>\n  );\n}\n\nconst SongTitle = styled.div`\n  font-size: 22px;\n  height: 30px;\n  line-height: 30px;\n`;\n\nexport default SongDetailsPage;\n","import useSWR, { SWRResponse } from 'swr';\n\nimport { songsAPI } from 'features/songs/songsAPI';\nimport { LyricsSource } from 'features/songs/lyrics/useLyrics';\n\ninterface Song {\n  id: string;\n  artist: string;\n  title: string;\n  youtubeId: string;\n  lyrics: LyricsSource[];\n}\n\ninterface SuspenseResponseInterface extends SWRResponse<Song, any> {\n  data: Song;\n}\n\nexport const useSongDetails = (songId: string) => {\n  return useSWR(\n    ['songs', songId],\n    (_type, songId) => songsAPI.fetchById(songId),\n    {\n      suspense: true,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n      revalidateOnMount: false,\n    }\n  ) as SuspenseResponseInterface;\n};\n"],"sourceRoot":""}