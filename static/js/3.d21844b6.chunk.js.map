{"version":3,"sources":["features/songs/details/SongDetailsPage.tsx","features/songs/details/useSongDetails.ts"],"names":["YouTubePlayer","React","lazy","LyricsSection","SongDetailsPage","data","songId","useSWR","_type","songsAPI","fetchById","suspense","revalidateOnFocus","revalidateOnReconnect","revalidateOnMount","useSongDetails","useParams","fallback","YouTubePlayerSkeleton","embedId","youtubeId","SongTitle","artist","title","LyricsSectionSkeleton","sources","lyrics","styled","div"],"mappings":"sPAeMA,EAAgBC,IAAMC,MAAK,kBAAM,gCACjCC,EAAgBF,IAAMC,MAAK,kBAAM,gCAMhC,SAASE,IAAmB,IAEzBC,ECPoB,SAACC,GAC7B,OAAOC,YACL,CAAC,QAASD,IACV,SAACE,EAAOF,GAAR,OAAmBG,IAASC,UAAUJ,KACtC,CACEK,UAAU,EACVC,mBAAmB,EACnBC,uBAAuB,EACvBC,mBAAmB,IDDNC,CADEC,cAAXV,QACAD,KAER,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,WAAD,CAAUY,SAAU,cAACC,EAAA,EAAD,IAApB,SACE,cAAClB,EAAD,CAAemB,QAASd,EAAKe,cAG/B,eAAC,IAAD,WACE,eAACC,EAAD,WACGhB,EAAKiB,OADR,MACmBjB,EAAKkB,SAExB,cAAC,IAAD,UACE,cAAC,WAAD,CAAUN,SAAU,cAACO,EAAA,EAAD,IAApB,SACE,cAACrB,EAAD,CAAesB,QAASpB,EAAKqB,mBAKrC,cAAC,IAAD,OAKN,IAAML,EAAYM,IAAOC,IAAV,uFAMAxB","file":"static/js/3.d21844b6.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport styled from '@emotion/styled';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  PageContainer,\n  SongContainer,\n  SongDetailsContainer,\n  LyricsContainer,\n  UpcomingContainer,\n} from './SongDetailsSkeleton';\nimport { YouTubePlayerSkeleton } from './YouTubePlayerSkeleton';\nimport { LyricsSectionSkeleton } from '../lyrics/LyricsSectionSkeleton';\nimport { useSongDetails } from './useSongDetails';\n\nconst YouTubePlayer = React.lazy(() => import('./YouTubePlayer'));\nconst LyricsSection = React.lazy(() => import('../lyrics/LyricsSection'));\n\ninterface RouteParams {\n  songId: string;\n}\n\nexport function SongDetailsPage() {\n  const { songId } = useParams<RouteParams>();\n  const { data } = useSongDetails(songId);\n\n  return (\n    <PageContainer>\n      <SongContainer>\n        <Suspense fallback={<YouTubePlayerSkeleton />}>\n          <YouTubePlayer embedId={data.youtubeId} />\n        </Suspense>\n\n        <SongDetailsContainer>\n          <SongTitle>\n            {data.artist} - {data.title}\n          </SongTitle>\n          <LyricsContainer>\n            <Suspense fallback={<LyricsSectionSkeleton />}>\n              <LyricsSection sources={data.lyrics} />\n            </Suspense>\n          </LyricsContainer>\n        </SongDetailsContainer>\n      </SongContainer>\n      <UpcomingContainer></UpcomingContainer>\n    </PageContainer>\n  );\n}\n\nconst SongTitle = styled.div`\n  font-size: 22px;\n  height: 30px;\n  line-height: 30px;\n`;\n\nexport default SongDetailsPage;\n","import useSWR, { SWRResponse } from 'swr';\n\nimport { songsAPI } from 'features/songs/songsAPI';\nimport { LyricsSource } from 'features/songs/lyrics/useLyrics';\n\ninterface Song {\n  id: string;\n  artist: string;\n  title: string;\n  youtubeId: string;\n  lyrics: LyricsSource[];\n}\n\ninterface SuspenseResponseInterface extends SWRResponse<Song, any> {\n  data: Song;\n}\n\nexport const useSongDetails = (songId: string) => {\n  return useSWR(\n    ['songs', songId],\n    (_type, songId) => songsAPI.fetchById(songId),\n    {\n      suspense: true,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n      revalidateOnMount: false,\n    }\n  ) as SuspenseResponseInterface;\n};\n"],"sourceRoot":""}